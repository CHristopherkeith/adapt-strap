{"version":3,"file":"tablelite.min.js","sources":["tablelite/tablelite.js"],"names":["angular","module","provider","defaults","this","expandIconClass","collapseIconClass","loadingIconClass","$get","settings","directive","$q","$http","$compile","$filter","$templateCache","adStrapUtils","_link","scope","element","attrs","tableName","items","list","undefined","paging","currentPage","totalPages","pageSize","localConfig","pagingArray","tableModels","mainTemplate","get","formatValue","value","filter","applyFilter","loadPage","page","i","startPagingPage","start","end","$eval","localDataSource","slice","Math","ceil","length","push","loadNextPage","loadPreviousPage","tableClasses","replace","columnDefinition","html","restrict","link"],"mappings":"AAOAA,QAAQC,OAAO,kCAAmCC,SAAS,aAAc,WACvE,GAAIC,GAAWC,KAAKD,UAChBE,gBAAiB,gCACjBC,kBAAmB,iCACnBC,iBAAkB,sCAEtBH,MAAKI,KAAO,WACV,OAASC,SAAUN,MAEpBO,UAAU,eACX,KACA,QACA,WACA,UACA,iBACA,eACA,SAAUC,EAAIC,EAAOC,EAAUC,EAASC,EAAgBC,GACtD,YACA,SAASC,GAAMC,EAAOC,EAASC,GAG7BF,EAAME,EAAMC,YACVC,OACEC,KAAMC,OACNC,QACEC,YAAa,EACbC,WAAYH,OACZI,SAAU,IAGdC,aAAeC,gBAGjB,IAAIC,GAAcb,EAAME,EAAMC,WAAYW,EAAejB,EAAekB,IAAI,+BAE5Ef,GAAMgB,YAAc,SAAUC,EAAOC,GACnC,MAAOpB,GAAaqB,YAAYF,EAAOC,IAEzClB,EAAMoB,SAAW,SAAUC,GACzB,GAA6GC,GAAGC,EAA5GC,GAASH,EAAO,GAAKR,EAAYT,MAAMG,OAAOG,SAAUe,EAAMD,EAAQX,EAAYT,MAAMG,OAAOG,QAMnG,KALAG,EAAYT,MAAMC,KAAOL,EAAM0B,MAAMxB,EAAMyB,iBAAiBC,MAAMJ,EAAOC,GACzEZ,EAAYT,MAAMG,OAAOC,YAAca,EACvCR,EAAYT,MAAMG,OAAOE,WAAaoB,KAAKC,KAAK9B,EAAM0B,MAAMxB,EAAMyB,iBAAiBI,OAASlB,EAAYT,MAAMG,OAAOG,UACrHG,EAAYF,YAAYC,eACxBW,EAAwC,EAAtBM,KAAKC,KAAKT,EAAO,GAAS,EACvCC,EAAI,EAAO,EAAJA,EAAOA,IACbC,EAAkBD,EAAI,GAAKC,EAAkBD,GAAKT,EAAYT,MAAMG,OAAOE,YAC7EI,EAAYF,YAAYC,YAAYoB,KAAKT,EAAkBD,IAIjEtB,EAAMiC,aAAe,WACfpB,EAAYT,MAAMG,OAAOC,YAAc,GAAKK,EAAYT,MAAMG,OAAOE,YACvET,EAAMoB,SAASP,EAAYT,MAAMG,OAAOC,YAAc,IAG1DR,EAAMkC,iBAAmB,WACnBrB,EAAYT,MAAMG,OAAOC,YAAc,EAAI,GAC7CR,EAAMoB,SAASP,EAAYT,MAAMG,OAAOC,YAAc,IAK1DR,EAAMoB,SAAS,GACflB,EAAMiC,aAAejC,EAAMiC,cAAgB,QAC3CrB,EAAeA,EAAasB,QAAQ,gBAAiBlC,EAAMC,WAAWiC,QAAQ,uBAAwBlC,EAAMmC,kBAAkBD,QAAQ,mBAAoBlC,EAAMiC,cAChKrD,QAAQmB,QAAQA,GAASqC,KAAK3C,EAASmB,GAAcd,IAEvD,OACEuC,SAAU,IACVC,KAAMzC","sourcesContent":["angular.module('adaptv.adaptStrap.tablelite', [])\n  .provider('$tablelite', function () {\n    var defaults = this.defaults = {\n      expandIconClass: 'glyphicon glyphicon-plus-sign',\n      collapseIconClass: 'glyphicon glyphicon-minus-sign',\n      loadingIconClass: 'glyphicon glyphicon-refresh ad-spin'\n    };\n    this.$get = function () {\n      return {\n        settings: defaults\n      };\n    };\n  })\n\n/**\n * Use this directive if you need to render a simple table with local data source.\n */\n  .directive('adTableLite', ['$q', '$http', '$compile', '$filter', '$templateCache', 'adStrapUtils',\n    function ($q, $http, $compile, $filter, $templateCache, adStrapUtils) {\n      'use strict';\n      function _link(scope, element, attrs) {\n        // We do the name spacing so the if there are multiple adap-table-lite on the scope,\n        // they don't fight with each other.\n        scope[attrs.tableName] = {\n          items: {\n            list: undefined,\n            paging: {\n              currentPage: 1,\n              totalPages: undefined,\n              pageSize: 5\n            }\n          },\n          localConfig: {\n            pagingArray: []\n          }\n        };\n\n        // ---------- Local data ---------- //\n        var tableModels = scope[attrs.tableName],\n          mainTemplate = $templateCache.get('tablelite/tablelite.tpl.html');\n\n        // ---------- ui handlers ---------- //\n        scope.formatValue = function (value, filter) {\n          return adStrapUtils.applyFilter(value, filter);\n        };\n        scope.loadPage = function (page) {\n          var start = (page - 1) * tableModels.items.paging.pageSize,\n            end = start + tableModels.items.paging.pageSize,\n            i,\n            startPagingPage;\n          tableModels.items.list = scope.$eval(attrs.localDataSource).slice(start, end);\n          tableModels.items.paging.currentPage = page;\n          tableModels.items.paging.totalPages = Math.ceil(\n              scope.$eval(attrs.localDataSource).length /\n              tableModels.items.paging.pageSize\n          );\n          tableModels.localConfig.pagingArray = [];\n          startPagingPage = (Math.ceil(page / 5) * 5) - 4;\n          for (i = 0; i < 5; i++) {\n            if (startPagingPage + i > 0 && startPagingPage + i <= tableModels.items.paging.totalPages) {\n              tableModels.localConfig.pagingArray.push(startPagingPage + i);\n            }\n          }\n\n        };\n\n        scope.loadNextPage = function () {\n          if (tableModels.items.paging.currentPage + 1 <= tableModels.items.paging.totalPages) {\n            scope.loadPage(tableModels.items.paging.currentPage + 1);\n          }\n        };\n\n        scope.loadPreviousPage = function () {\n          if (tableModels.items.paging.currentPage - 1 > 0) {\n            scope.loadPage(tableModels.items.paging.currentPage - 1);\n          }\n        };\n\n        // ---------- initialization and event listeners ---------- //\n        //We do the compile after injecting the name spacing into the template.\n        scope.loadPage(1);\n\n        attrs.tableClasses = attrs.tableClasses || 'table';\n        mainTemplate = mainTemplate.replace(/%=tableName%/g, attrs.tableName).\n          replace(/%=columnDefinition%/g, attrs.columnDefinition).\n          replace(/%=tableClasses%/g, attrs.tableClasses);\n        angular.element(element).html($compile(mainTemplate)(scope));\n      }\n\n      return {\n        restrict: 'E',\n        link: _link\n      };\n    }]);\n"],"sourceRoot":"/source/"}