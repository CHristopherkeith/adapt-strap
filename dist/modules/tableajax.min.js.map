{"version":3,"file":"tableajax.min.js","sources":["tableajax/tableajax.js"],"names":["angular","module","provider","defaults","this","expandIconClass","collapseIconClass","loadingIconClass","$get","settings","directive","$parse","$compile","$templateCache","$adPaging","adDebounce","adStrapUtils","_link","scope","element","attrs","tableName","items","list","undefined","paging","currentPage","totalPages","pageSize","pageSizes","localConfig","pagingArray","disablePaging","ajaxConfig","$eval","applyFilter","lastRequestToken","tableModels","mainTemplate","get","loadPage","page","Math","random","then","response","identityToken","loadNextPage","loadPreviousPage","loadLastPage","pageSizeChanged","size","Number","$watch","tableClasses","paginationBtnGroupClasses","replace","columnDefinition","html","restrict","link"],"mappings":"AAOAA,QAAQC,OAAO,kCAAmCC,SAAS,aAAc,WACvE,GAAIC,GAAWC,KAAKD,UAChBE,gBAAiB,gCACjBC,kBAAmB,iCACnBC,iBAAkB,sCAEtBH,MAAKI,KAAO,WACV,OAASC,SAAUN,MAEpBO,UAAU,eACX,SACA,WACA,iBACA,YACA,aACA,eACA,SAAUC,EAAQC,EAAUC,EAAgBC,EAAWC,EAAYC,GACjE,YACA,SAASC,GAAMC,EAAOC,EAASC,GAG7BF,EAAME,EAAMC,YACVC,OACEC,KAAMC,OACNC,QACEC,YAAa,EACbC,WAAYH,OACZI,SAAUJ,OACVK,UAAWlB,EAAOS,EAAMS,eACtB,GACA,GACA,MAINC,aACEC,eACAC,eAAe,GAEjBC,WAAYf,EAAMgB,MAAMd,EAAMa,YAC9BE,YAAanB,EAAamB,YAG5B,IAA6GC,GAAzGC,EAAcnB,EAAME,EAAMC,WAAYiB,EAAezB,EAAe0B,IAAI,+BAC5EF,GAAYf,MAAMG,OAAOG,SAAWS,EAAYf,MAAMG,OAAOI,UAAU,GAEvEQ,EAAYG,SAAWzB,EAAW,SAAU0B,GAC1CL,EAAmBM,KAAKC,SACxBN,EAAYP,YAAYE,eAAgB,EACxClB,EAAU0B,SAASC,EAAMJ,EAAYf,MAAMG,OAAOG,SAAUS,EAAYJ,WAAYG,GAAkBQ,KAAK,SAAUC,GAC/GA,EAASC,gBAAkBV,IAC7BC,EAAYf,MAAMC,KAAOsB,EAASvB,MAClCe,EAAYf,MAAMG,OAAOE,WAAakB,EAASlB,WAC/CU,EAAYf,MAAMG,OAAOC,YAAcmB,EAASnB,YAChDW,EAAYP,YAAYC,YAAcc,EAASd,YAC/CM,EAAYP,YAAYE,eAAgB,IAEzC,WACDK,EAAYP,YAAYE,eAAgB,KAEzC,IAAI,GACPK,EAAYU,aAAe,WACpBV,EAAYP,YAAYE,eACvBK,EAAYf,MAAMG,OAAOC,YAAc,GAAKW,EAAYf,MAAMG,OAAOE,YACvEU,EAAYG,SAASH,EAAYf,MAAMG,OAAOC,YAAc,IAIlEW,EAAYW,iBAAmB,WACxBX,EAAYP,YAAYE,eACvBK,EAAYf,MAAMG,OAAOC,YAAc,EAAI,GAC7CW,EAAYG,SAASH,EAAYf,MAAMG,OAAOC,YAAc,IAIlEW,EAAYY,aAAe,WACpBZ,EAAYP,YAAYE,eACvBK,EAAYf,MAAMG,OAAOC,cAAgBW,EAAYf,MAAMG,OAAOE,YACpEU,EAAYG,SAASH,EAAYf,MAAMG,OAAOE,aAIpDU,EAAYa,gBAAkB,SAAUC,GAClCC,OAAOD,KAAUd,EAAYf,MAAMG,OAAOG,WAC5CS,EAAYf,MAAMG,OAAOG,SAAWwB,OAAOD,GAC3Cd,EAAYG,SAAS,KAKzBH,EAAYG,SAAS,GAErBtB,EAAMmC,OAAOjC,EAAMa,WAAY,WAC7BI,EAAYG,SAAS,KACpB,GACHpB,EAAMkC,aAAelC,EAAMkC,cAAgB,QAC3ClC,EAAMmC,0BAA4BnC,EAAMmC,2BAA6B,yBACrEjB,EAAeA,EAAakB,QAAQ,gBAAiBpC,EAAMC,WAAWmC,QAAQ,uBAAwBpC,EAAMqC,kBAAkBD,QAAQ,mBAAoBpC,EAAMkC,cAAcE,QAAQ,gCAAiCpC,EAAMmC,2BAC7NvD,QAAQmB,QAAQA,GAASuC,KAAK9C,EAAS0B,GAAcpB,IAEvD,OACEyC,SAAU,IACVC,KAAM3C","sourcesContent":["angular.module('adaptv.adaptStrap.tableajax', [])\n  .provider('$tableajax', function () {\n    var defaults = this.defaults = {\n      expandIconClass: 'glyphicon glyphicon-plus-sign',\n      collapseIconClass: 'glyphicon glyphicon-minus-sign',\n      loadingIconClass: 'glyphicon glyphicon-refresh ad-spin'\n    };\n    this.$get = function () {\n      return {\n        settings: defaults\n      };\n    };\n  })\n\n/**\n * Use this directive if you need to render a table that loads data from ajax.\n */\n  .directive('adTableAjax',\n  ['$parse', '$compile', '$templateCache', '$adPaging', 'adDebounce', 'adStrapUtils',\n    function ($parse, $compile, $templateCache, $adPaging, adDebounce, adStrapUtils) {\n      'use strict';\n      function _link(scope, element, attrs) {\n        // We do the name spacing so the if there are multiple adap-table-lite on the scope,\n        // they don't fight with each other.\n        scope[attrs.tableName] = {\n          items: {\n            list: undefined,\n            paging: {\n              currentPage: 1,\n              totalPages: undefined,\n              pageSize: undefined,\n              pageSizes: $parse(attrs.pageSizes)() || [10, 25, 50]\n            }\n          },\n          localConfig: {\n            pagingArray: [],\n            disablePaging: false\n          },\n          ajaxConfig: scope.$eval(attrs.ajaxConfig),\n          applyFilter: adStrapUtils.applyFilter\n        };\n\n        // ---------- Local data ---------- //\n        var tableModels = scope[attrs.tableName],\n          mainTemplate = $templateCache.get('tableajax/tableajax.tpl.html'),\n          lastRequestToken;\n        tableModels.items.paging.pageSize = tableModels.items.paging.pageSizes[0];\n\n        // ---------- ui handlers ---------- //\n        tableModels.loadPage = adDebounce(function (page) {\n          lastRequestToken = Math.random();\n          tableModels.localConfig.disablePaging = true;\n          $adPaging.loadPage(\n            page,\n            tableModels.items.paging.pageSize,\n            tableModels.ajaxConfig,\n            lastRequestToken\n          ).then(\n            function (response) {\n              if (response.identityToken === lastRequestToken) {\n                tableModels.items.list = response.items;\n                tableModels.items.paging.totalPages = response.totalPages;\n                tableModels.items.paging.currentPage = response.currentPage;\n                tableModels.localConfig.pagingArray = response.pagingArray;\n                tableModels.localConfig.disablePaging = false;\n              }\n            },\n            function () {\n              tableModels.localConfig.disablePaging = false;\n            }\n          );\n        }, 50, false);\n\n        tableModels.loadNextPage = function () {\n          if (!tableModels.localConfig.disablePaging) {\n            if (tableModels.items.paging.currentPage + 1 <= tableModels.items.paging.totalPages) {\n              tableModels.loadPage(tableModels.items.paging.currentPage + 1);\n            }\n          }\n        };\n\n        tableModels.loadPreviousPage = function () {\n          if (!tableModels.localConfig.disablePaging) {\n            if (tableModels.items.paging.currentPage - 1 > 0) {\n              tableModels.loadPage(tableModels.items.paging.currentPage - 1);\n            }\n          }\n        };\n\n        tableModels.loadLastPage = function () {\n          if (!tableModels.localConfig.disablePaging) {\n            if (tableModels.items.paging.currentPage !== tableModels.items.paging.totalPages) {\n              tableModels.loadPage(tableModels.items.paging.totalPages);\n            }\n          }\n        };\n\n        tableModels.pageSizeChanged = function (size) {\n          if (Number(size) !== tableModels.items.paging.pageSize) {\n            tableModels.items.paging.pageSize = Number(size);\n            tableModels.loadPage(1);\n          }\n        };\n\n        // ---------- initialization and event listeners ---------- //\n        //We do the compile after injecting the name spacing into the template.\n        tableModels.loadPage(1);\n\n        // reset on parameter change\n        scope.$watch(attrs.ajaxConfig, function () {\n          tableModels.loadPage(1);\n        }, true);\n\n        attrs.tableClasses = attrs.tableClasses || 'table';\n        attrs.paginationBtnGroupClasses = attrs.paginationBtnGroupClasses || 'btn-group btn-group-sm';\n        mainTemplate = mainTemplate.replace(/%=tableName%/g, attrs.tableName).\n          replace(/%=columnDefinition%/g, attrs.columnDefinition).\n          replace(/%=tableClasses%/g, attrs.tableClasses).\n          replace(/%=paginationBtnGroupClasses%/g, attrs.paginationBtnGroupClasses);\n        angular.element(element).html($compile(mainTemplate)(scope));\n      }\n\n      return {\n        restrict: 'E',\n        link: _link\n      };\n    }]);\n"],"sourceRoot":"/source/"}