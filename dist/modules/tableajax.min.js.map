{"version":3,"file":"tableajax.min.js","sources":["tableajax/tableajax.js"],"names":["angular","module","provider","defaults","this","expandIconClass","collapseIconClass","loadingIconClass","$get","settings","directive","$q","$http","$compile","$filter","$templateCache","$adPaging","adStrapUtils","_link","scope","element","attrs","tableName","items","list","undefined","paging","currentPage","totalPages","pageSize","localConfig","pagingArray","ajaxConfig","$eval","tableModels","mainTemplate","get","formatValue","value","filter","applyFilter","loadPage","page","then","response","loadNextPage","loadPreviousPage","tableClasses","replace","columnDefinition","html","restrict","link"],"mappings":"AAOAA,QAAQC,OAAO,kCAAmCC,SAAS,aAAc,WACvE,GAAIC,GAAWC,KAAKD,UAChBE,gBAAiB,gCACjBC,kBAAmB,iCACnBC,iBAAkB,sCAEtBH,MAAKI,KAAO,WACV,OAASC,SAAUN,MAEpBO,UAAU,eACX,KACA,QACA,WACA,UACA,iBACA,YACA,eACA,SAAUC,EAAIC,EAAOC,EAAUC,EAASC,EAAgBC,EAAWC,GACjE,YACA,SAASC,GAAMC,EAAOC,EAASC,GAG7BF,EAAME,EAAMC,YACVC,OACEC,KAAMC,OACNC,QACEC,YAAa,EACbC,WAAYH,OACZI,SAAU,IAGdC,aAAeC,gBACfC,WAAYb,EAAMc,MAAMZ,EAAMW,YAGhC,IAAIE,GAAcf,EAAME,EAAMC,WAAYa,EAAepB,EAAeqB,IAAI,+BAE5EjB,GAAMkB,YAAc,SAAUC,EAAOC,GACnC,MAAOtB,GAAauB,YAAYF,EAAOC,IAEzCpB,EAAMsB,SAAW,SAAUC,GACzB1B,EAAUyB,SAASC,EAAMR,EAAYX,MAAMG,OAAOG,SAAUK,EAAYF,YAAYW,KAAK,SAAUC,GACjGV,EAAYX,MAAMC,KAAOoB,EAASrB,MAClCW,EAAYX,MAAMG,OAAOE,WAAagB,EAAShB,WAC/CM,EAAYX,MAAMG,OAAOC,YAAciB,EAASjB,YAChDO,EAAYJ,YAAYC,YAAca,EAASb,eAGnDZ,EAAM0B,aAAe,WACfX,EAAYX,MAAMG,OAAOC,YAAc,GAAKO,EAAYX,MAAMG,OAAOE,YACvET,EAAMsB,SAASP,EAAYX,MAAMG,OAAOC,YAAc,IAG1DR,EAAM2B,iBAAmB,WACnBZ,EAAYX,MAAMG,OAAOC,YAAc,EAAI,GAC7CR,EAAMsB,SAASP,EAAYX,MAAMG,OAAOC,YAAc,IAK1DR,EAAMsB,SAAS,GACfpB,EAAM0B,aAAe1B,EAAM0B,cAAgB,QAC3CZ,EAAeA,EAAaa,QAAQ,gBAAiB3B,EAAMC,WAAW0B,QAAQ,uBAAwB3B,EAAM4B,kBAAkBD,QAAQ,mBAAoB3B,EAAM0B,cAChK/C,QAAQoB,QAAQA,GAAS8B,KAAKrC,EAASsB,GAAchB,IAEvD,OACEgC,SAAU,IACVC,KAAMlC","sourcesContent":["angular.module('adaptv.adaptStrap.tableajax', [])\n  .provider('$tableajax', function () {\n    var defaults = this.defaults = {\n      expandIconClass: 'glyphicon glyphicon-plus-sign',\n      collapseIconClass: 'glyphicon glyphicon-minus-sign',\n      loadingIconClass: 'glyphicon glyphicon-refresh ad-spin'\n    };\n    this.$get = function () {\n      return {\n        settings: defaults\n      };\n    };\n  })\n\n/**\n * Use this directive if you need to render a table that loads data from ajax.\n */\n  .directive('adTableAjax', ['$q', '$http', '$compile', '$filter', '$templateCache', '$adPaging', 'adStrapUtils',\n    function ($q, $http, $compile, $filter, $templateCache, $adPaging, adStrapUtils) {\n      'use strict';\n      function _link(scope, element, attrs) {\n        // We do the name spacing so the if there are multiple adap-table-lite on the scope,\n        // they don't fight with each other.\n        scope[attrs.tableName] = {\n          items: {\n            list: undefined,\n            paging: {\n              currentPage: 1,\n              totalPages: undefined,\n              pageSize: 5\n            }\n          },\n          localConfig: {\n            pagingArray: []\n          },\n          ajaxConfig: scope.$eval(attrs.ajaxConfig)\n        };\n\n        // ---------- Local data ---------- //\n        var tableModels = scope[attrs.tableName],\n          mainTemplate = $templateCache.get('tablelite/tablelite.tpl.html');\n\n        // ---------- ui handlers ---------- //\n        scope.formatValue = function (value, filter) {\n          return adStrapUtils.applyFilter(value, filter);\n        };\n\n        scope.loadPage = function (page) {\n          $adPaging.loadPage(page, tableModels.items.paging.pageSize, tableModels.ajaxConfig).then(\n            function (response) {\n              tableModels.items.list = response.items;\n              tableModels.items.paging.totalPages = response.totalPages;\n              tableModels.items.paging.currentPage = response.currentPage;\n              tableModels.localConfig.pagingArray = response.pagingArray;\n            }\n          );\n        };\n\n        scope.loadNextPage = function () {\n          if (tableModels.items.paging.currentPage + 1 <= tableModels.items.paging.totalPages) {\n            scope.loadPage(tableModels.items.paging.currentPage + 1);\n          }\n        };\n\n        scope.loadPreviousPage = function () {\n          if (tableModels.items.paging.currentPage - 1 > 0) {\n            scope.loadPage(tableModels.items.paging.currentPage - 1);\n          }\n        };\n\n        // ---------- initialization and event listeners ---------- //\n        //We do the compile after injecting the name spacing into the template.\n        scope.loadPage(1);\n\n        attrs.tableClasses = attrs.tableClasses || 'table';\n        mainTemplate = mainTemplate.replace(/%=tableName%/g, attrs.tableName).\n          replace(/%=columnDefinition%/g, attrs.columnDefinition).\n          replace(/%=tableClasses%/g, attrs.tableClasses);\n        angular.element(element).html($compile(mainTemplate)(scope));\n      }\n\n      return {\n        restrict: 'E',\n        link: _link\n      };\n    }]);\n"],"sourceRoot":"/source/"}