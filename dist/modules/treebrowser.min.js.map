{"version":3,"file":"treebrowser.min.js","sources":["treebrowser/treebrowser.js"],"names":["angular","module","provider","defaults","this","expandIconClass","collapseIconClass","loadingIconClass","$get","settings","directive","$compile","$http","$treebrowser","$templateCache","link","scope","element","attrs","treeName","nodeTemplateUrl","nodeHeaderUrl","childrenPadding","template","populateMainTemplate","nodeTemplate","nodeHeaderTemplate","data","get","replace","treeRoot","bordered","childNode","rowNgClass","empty","append","toggle","event","item","toggleCallback","stopPropagation","$eval","_expanded","hasChildren","found","length","showHeader","success","headerTemplate"],"mappings":"AAOA,YACAA,SAAQC,OAAO,oCAAqCC,SAAS,eAAgB,WAC3E,GAAIC,GAAWC,KAAKD,UAChBE,gBAAiB,gCACjBC,kBAAmB,iCACnBC,iBAAkB,sCAEtBH,MAAKI,KAAO,WACV,OAASC,SAAUN,MAEpBO,UAAU,iBACX,WACA,QACA,eACA,iBACA,SAAUC,EAAUC,EAAOC,EAAcC,GAEvC,OACEC,KAAM,SAAUC,EAAOC,EAASC,GAC9B,GAAIC,GAAWD,EAAMC,UAAY,GAAIC,EAAkBF,EAAME,iBAAmB,GAAIC,EAAgBH,EAAMG,eAAiB,GAAIC,EAAkBJ,EAAMI,iBAAmB,GAAIC,EAAW,GAAIC,EAAuB,SAAUC,EAAcC,GACxO,GAAIC,GAAOb,EAAec,IAAI,mCAC9BL,GAAWI,EAAKE,QAAQ,eAAgBV,GAAUU,QAAQ,mBAAoBX,EAAMY,UAAUD,QAAQ,eAAgBX,EAAMa,UAAUF,QAAQ,sBAAuBhB,EAAaJ,SAASJ,iBAAiBwB,QAAQ,wBAAyBhB,EAAaJ,SAASH,mBAAmBuB,QAAQ,uBAAwBhB,EAAaJ,SAASF,kBAAkBsB,QAAQ,oBAAqBX,EAAMc,WAAWH,QAAQ,sBAAuBP,GAAiBO,QAAQ,iBAAkBX,EAAMe,YAAc,IAAIJ,QAAQ,mBAAoBJ,GAAcI,QAAQ,yBAA0BH,GAAsB,IAChlBT,EAAQiB,QACRjB,EAAQkB,OAAOxB,EAASY,GAAUP,IAEtCA,GAAMG,EAAW,gBACfiB,OAAQ,SAAUC,EAAOC,GACvB,GAAIC,EACJF,GAAMG,kBACND,EAAiBvB,EAAMyB,MAAMvB,EAAMqB,gBAC/BA,EACFA,EAAeD,GAEfA,EAAKI,WAAaJ,EAAKI,WAG3BC,YAAa,SAAUL,GACrB,GAAIK,GAAc3B,EAAMyB,MAAMvB,EAAMyB,aAAcC,EAAQN,EAAKpB,EAAMc,YAAcM,EAAKpB,EAAMc,WAAWa,OAAS,CAIlH,OAHIF,KACFC,EAAQD,EAAYL,IAEfM,GAETE,WAA8B,KAAlBzB,GAAuB,GAAO,GAEpB,KAApBD,EAEFR,EAAMgB,IAAIR,GAAiB2B,QAAQ,SAAUtB,GACrB,KAAlBJ,EACFT,EAAMgB,IAAIP,GAAe0B,QAAQ,SAAUC,GACzCxB,EAAqBC,EAAcuB,KAGrCxB,EAAqBC,EAAc,MAIvCD,EAAqB","sourcesContent":["'use strict';\n\nangular.module('adaptv.adaptStrap.treebrowser',[])\n\n    .provider('$treebrowser', function() {\n        var defaults = this.defaults = {\n            expandIconClass: 'glyphicon glyphicon-plus-sign',\n            collapseIconClass: 'glyphicon glyphicon-minus-sign',\n            loadingIconClass: 'glyphicon glyphicon-refresh ad-spin'\n        };\n        this.$get = function() {\n            return {\n                settings: defaults\n            };\n        };\n    })\n\n/**\n * treeBrowser directive populates a tree dataStructure\n * In your tree-browser tag you need to provide following attributes\n * tree-name - a string name of the tree. To support multiple trees\n * tree-root - root path to the tree data structure example: audienceTargeting.segmentTree\n * child-node - name of the object that contains children nodes example child-node=\"children\"\n * node-template-url - template to render the node properties\n *                     take a look at for usage \"views/templates/directives/treeBrowser/segment.html\"\n * node-header-url - template similar to node template, but it has the header tags. (EX: id, name, status)\n * children-padding - padding from parent. Default is 15px.\n * has-children - function that checks the availability of the children.\n *                this is only needed if you are doing lazy loading. if false (row is a leaf),\n *                the toggle arrow will not be shown.\n * row-ng-class - ng-class expression that will be applied to each row.\n * toggle-callback - This function is to lazy load the tree levels.\n *                   Provide the path to toggle function. If you do provide this, the tree item will be passed to this\n *                   function every time some one toggles a tree level. In this case, you need to set the _expanded\n *                   property to true or false. You can also set loading property to true or false on the item.\n *                   If you set _loading to true, the ui will show the _loading icon on that tree level.\n *\n * treeBrowser will adapt the parent element's height and width.\n *\n * For example usage take a look at segments-browse-all.html file.\n */\n\n    .directive('adTreeBrowser', ['$compile', '$http', '$treebrowser', '$templateCache', function ($compile, $http, $treebrowser, $templateCache) {\n        'use strict';\n        return {\n            link: function (scope, element, attrs) {\n                var treeName = attrs.treeName || '',\n                    nodeTemplateUrl = attrs.nodeTemplateUrl || '',\n                    nodeHeaderUrl = attrs.nodeHeaderUrl || '',\n                    childrenPadding = attrs.childrenPadding || 15,\n                    template = '',\n                    populateMainTemplate = function (nodeTemplate, nodeHeaderTemplate) {\n                        var data = $templateCache.get('treebrowser/treebrowser.tpl.html')\n                        template = data.replace(/%=treeName%/g, treeName).\n                            replace(/%=treeRootName%/g, attrs.treeRoot).\n                            replace(/%=bordered%/g, attrs.bordered).\n                            replace(/%=expandIconClass%/g, $treebrowser.settings.expandIconClass).\n                            replace(/%=collapseIconClass%/g, $treebrowser.settings.collapseIconClass).\n                            replace(/%=loadingIconClass%/g, $treebrowser.settings.loadingIconClass).\n                            replace(/%=childNodeName%/g, attrs.childNode).\n                            replace(/%=childrenPadding%/g, childrenPadding).\n                            replace(/%=rowNgClass%/g, attrs.rowNgClass || '').\n                            replace(/%=nodeTemplate%/g, nodeTemplate).\n                            replace(/%=nodeHeaderTemplate%/g, nodeHeaderTemplate || '');\n                        element.empty();\n                        element.append($compile(template)(scope));\n                    };\n                scope[treeName + 'TreeBrowser'] = {\n                    toggle: function (event, item) {\n                        var toggleCallback;\n                        event.stopPropagation();\n                        toggleCallback = scope.$eval(attrs.toggleCallback);\n                        if (toggleCallback) {\n                            toggleCallback(item);\n                        } else {\n                            item._expanded = !item._expanded;\n                        }\n                    },\n                    hasChildren: function (item) {\n                        var hasChildren = scope.$eval(attrs.hasChildren),\n                            found = item[attrs.childNode] && item[attrs.childNode].length > 0;\n                        if (hasChildren) {\n                            found = hasChildren(item);\n                        }\n                        return found;\n                    },\n                    showHeader: (nodeHeaderUrl !== '') ? true : false\n                };\n                if (nodeTemplateUrl !== '') {\n                    // Getting the template from nodeTemplateUrl\n                    $http.get(nodeTemplateUrl).success(function (nodeTemplate) {\n                        if (nodeHeaderUrl !== '') {\n                            $http.get(nodeHeaderUrl).success(function (headerTemplate) {\n                                populateMainTemplate(nodeTemplate, headerTemplate);\n                            });\n                        } else {\n                            populateMainTemplate(nodeTemplate, '');\n                        }\n                    });\n                } else {\n                    populateMainTemplate('<span>{{ item.name || \"\" }}</span>');\n                }\n            }\n        };\n    }]);\n"],"sourceRoot":"/source/"}