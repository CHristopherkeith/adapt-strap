{"version":3,"file":"treebrowser.min.js","sources":["treebrowser/treebrowser.js"],"names":["angular","module","directive","$compile","$http","$adConfig","$templateCache","restrict","link","scope","element","attrs","treeName","nodeTemplateUrl","nodeHeaderUrl","childrenPadding","template","populateMainTemplate","nodeTemplate","nodeHeaderTemplate","data","get","replace","treeRoot","bordered","expandIconClass","iconClasses","expand","collapseIconClass","collapse","loadingIconClass","loadingSpinner","childNode","rowNgClass","empty","append","toggle","event","item","toggleCallback","stopPropagation","$eval","_expanded","hasChildren","found","length","showHeader","success","headerTemplate"],"mappings":"AAOA,YACAA,SAAQC,OAAO,oCAAqCC,UAAU,iBAC5D,WACA,QACA,YACA,iBACA,SAAUC,EAAUC,EAAOC,EAAWC,GACpC,OACEC,SAAU,IACVC,KAAM,SAAUC,EAAOC,EAASC,GAC9B,GAAIC,GAAWD,EAAMC,UAAY,GAAIC,EAAkBF,EAAME,iBAAmB,GAAIC,EAAgBH,EAAMG,eAAiB,GAAIC,EAAkBJ,EAAMI,iBAAmB,GAAIC,EAAW,GAAIC,EAAuB,SAAUC,EAAcC,GACxO,GAAIC,GAAOd,EAAee,IAAI,mCAC9BL,GAAWI,EAAKE,QAAQ,eAAgBV,GAAUU,QAAQ,mBAAoBX,EAAMY,UAAUD,QAAQ,eAAgBX,EAAMa,UAAUF,QAAQ,sBAAuBX,EAAMc,iBAAmBpB,EAAUqB,YAAYC,QAAQL,QAAQ,wBAAyBX,EAAMiB,mBAAqBvB,EAAUqB,YAAYG,UAAUP,QAAQ,uBAAwBX,EAAMmB,kBAAoBzB,EAAUqB,YAAYK,gBAAgBT,QAAQ,oBAAqBX,EAAMqB,WAAWV,QAAQ,sBAAuBP,GAAiBO,QAAQ,iBAAkBX,EAAMsB,YAAc,IAAIX,QAAQ,mBAAoBJ,GAAcI,QAAQ,yBAA0BH,GAAsB,IAC1oBT,EAAQwB,QACRxB,EAAQyB,OAAOhC,EAASa,GAAUP,IAEtCA,GAAMG,EAAW,gBACfwB,OAAQ,SAAUC,EAAOC,GACvB,GAAIC,EACJF,GAAMG,kBACND,EAAiB9B,EAAMgC,MAAM9B,EAAM4B,gBAC/BA,EACFA,EAAeD,GAEfA,EAAKI,WAAaJ,EAAKI,WAG3BC,YAAa,SAAUL,GACrB,GAAIK,GAAclC,EAAMgC,MAAM9B,EAAMgC,aAAcC,EAAQN,EAAK3B,EAAMqB,YAAcM,EAAK3B,EAAMqB,WAAWa,OAAS,CAIlH,OAHIF,KACFC,EAAQD,EAAYL,IAEfM,GAETE,WAA8B,KAAlBhC,GAAuB,GAAO,GAEpB,KAApBD,EAEFT,EAAMiB,IAAIR,GAAiBkC,QAAQ,SAAU7B,GACrB,KAAlBJ,EACFV,EAAMiB,IAAIP,GAAeiC,QAAQ,SAAUC,GACzC/B,EAAqBC,EAAc8B,KAGrC/B,EAAqBC,EAAc,MAIvCD,EAAqB","sourcesContent":["'use strict';\n\nangular.module('adaptv.adaptStrap.treebrowser', [])\n\n/**\n * adTreeBrowser directive populates a tree dataStructure\n */\n  .directive('adTreeBrowser', ['$compile', '$http', '$adConfig', '$templateCache',\n    function ($compile, $http, $adConfig, $templateCache) {\n      return {\n        restrict: 'E',\n        link: function (scope, element, attrs) {\n          var treeName = attrs.treeName || '',\n            nodeTemplateUrl = attrs.nodeTemplateUrl || '',\n            nodeHeaderUrl = attrs.nodeHeaderUrl || '',\n            childrenPadding = attrs.childrenPadding || 15,\n            template = '',\n            populateMainTemplate = function (nodeTemplate, nodeHeaderTemplate) {\n              var data = $templateCache.get('treebrowser/treebrowser.tpl.html');\n              template = data.replace(/%=treeName%/g, treeName).\n                replace(/%=treeRootName%/g, attrs.treeRoot).\n                replace(/%=bordered%/g, attrs.bordered).\n                replace(/%=expandIconClass%/g, attrs.expandIconClass || $adConfig.iconClasses.expand).\n                replace(/%=collapseIconClass%/g, attrs.collapseIconClass || $adConfig.iconClasses.collapse).\n                replace(/%=loadingIconClass%/g, attrs.loadingIconClass || $adConfig.iconClasses.loadingSpinner).\n                replace(/%=childNodeName%/g, attrs.childNode).\n                replace(/%=childrenPadding%/g, childrenPadding).\n                replace(/%=rowNgClass%/g, attrs.rowNgClass || '').\n                replace(/%=nodeTemplate%/g, nodeTemplate).\n                replace(/%=nodeHeaderTemplate%/g, nodeHeaderTemplate || '');\n              element.empty();\n              element.append($compile(template)(scope));\n            };\n          scope[treeName + 'TreeBrowser'] = {\n            toggle: function (event, item) {\n              var toggleCallback;\n              event.stopPropagation();\n              toggleCallback = scope.$eval(attrs.toggleCallback);\n              if (toggleCallback) {\n                toggleCallback(item);\n              } else {\n                item._expanded = !item._expanded;\n              }\n            },\n            hasChildren: function (item) {\n              var hasChildren = scope.$eval(attrs.hasChildren),\n                found = item[attrs.childNode] && item[attrs.childNode].length > 0;\n              if (hasChildren) {\n                found = hasChildren(item);\n              }\n              return found;\n            },\n            showHeader: (nodeHeaderUrl !== '') ? true : false\n          };\n          if (nodeTemplateUrl !== '') {\n            // Getting the template from nodeTemplateUrl\n            $http.get(nodeTemplateUrl).success(function (nodeTemplate) {\n              if (nodeHeaderUrl !== '') {\n                $http.get(nodeHeaderUrl).success(function (headerTemplate) {\n                  populateMainTemplate(nodeTemplate, headerTemplate);\n                });\n              } else {\n                populateMainTemplate(nodeTemplate, '');\n              }\n            });\n          } else {\n            populateMainTemplate('<span>{{ item.name || \"\" }}</span>');\n          }\n        }\n      };\n    }]);\n"],"sourceRoot":"/source/"}