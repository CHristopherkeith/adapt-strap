{"version":3,"file":"utils.min.js","sources":["utils/utils.js"],"names":["angular","module","factory","$filter","evalObjectProperty","obj","property","arr","split","length","shift","applyFilter","value","filter","parts","filterOptions","provider","defaults","this","request","start","pageSize","page","response","totalItems","itemsLocation","$get","$q","$http","adStrapUtils","loadPage","pageToLoad","ajaxConfig","i","startPagingPage","success","defer","params","res","items","currentPage","totalPages","Math","ceil","pagingArray","push","resolve","method","jsonp","url","promise"],"mappings":"AAOAA,QAAQC,OAAO,8BAA+BC,QAAQ,gBACpD,UACA,SAAUC,GACR,OACEC,mBAAoB,SAAUC,EAAKC,GAEjC,IADA,GAAIC,GAAMD,EAASE,MAAM,KAClBD,EAAIE,QACTJ,EAAMA,EAAIE,EAAIG,QAEhB,OAAOL,IAETM,YAAa,SAAUC,EAAOC,GAC5B,GAAIC,GAAOC,CAUX,OATIF,KACFC,EAAQD,EAAOL,MAAM,KACrBO,EAAgBD,EAAM,GAEpBF,EADEG,EACMZ,EAAQW,EAAM,IAAIF,EAAOG,GAEzBZ,EAAQW,EAAM,IAAIF,IAGvBA,OAIZI,SAAS,YAAa,WACvB,GAAIC,GAAWC,KAAKD,UAChBE,SACEC,MAAO,OACPC,SAAU,QACVC,KAAM,QAERC,UACEC,WAAY,kCACZC,cAAe,gCAGrBP,MAAKQ,KAAO,SAAUC,EAAIC,EAAOC,GAC/B,OACEC,SAAU,SAAUC,EAAYV,EAAUW,GACxC,GAAyCC,GAAGC,EAAiBC,EAAzDf,GAASW,EAAa,GAAKV,EAAuCe,EAAQT,EAAGS,OAwBjF,OAvBAJ,GAAWK,OAAOpB,EAASE,QAAQC,OAASA,EAC5CY,EAAWK,OAAOpB,EAASE,QAAQE,UAAYA,EAC/CW,EAAWK,OAAOpB,EAASE,QAAQG,MAAQS,EAC3CI,EAAU,SAAUG,GAClB,GAAIf,IACAgB,MAAOV,EAAazB,mBAAmBkC,EAAKrB,EAASM,SAASE,eAC9De,YAAaT,EACbU,WAAYC,KAAKC,KAAKd,EAAazB,mBAAmBkC,EAAKrB,EAASM,SAASC,YAAcH,GAC3FuB,eAGJ,KADAV,EAAkBQ,KAAKC,KAAKZ,EAAaV,GAAYA,GAAYA,EAAW,GACvEY,EAAI,EAAO,EAAJA,EAAOA,IACbC,EAAkBD,EAAI,GAAKC,EAAkBD,GAAKV,EAASkB,YAC7DlB,EAASqB,YAAYC,KAAKX,EAAkBD,EAGhDG,GAAMU,QAAQvB,IAEU,UAAtBS,EAAWe,OACbnB,EAAMoB,MAAMhB,EAAWiB,IAAM,0BAA2BjB,GAAYG,QAAQA,GAE5EP,EAAMI,GAAYG,QAAQA,GAErBC,EAAMc","sourcesContent":["angular.module('adaptv.adaptStrap.utils', [])\n  .factory('adStrapUtils', ['$filter', function ($filter) {\n    return {\n      evalObjectProperty: function (obj, property) {\n        var arr = property.split('.');\n        while (arr.length) {\n          obj = obj[arr.shift()];\n        }\n        return obj;\n      },\n      applyFilter: function (value, filter) {\n        var parts,\n          filterOptions;\n        if (filter) {\n          parts = filter.split(':');\n          filterOptions = parts[1];\n          if (filterOptions) {\n            value = $filter(parts[0])(value, filterOptions);\n          } else {\n            value = $filter(parts[0])(value);\n          }\n        }\n        return value;\n      }\n    };\n  }])\n  .provider('$adPaging', function () {\n    var defaults = this.defaults = {\n      request: {\n        start: 'skip',\n        pageSize: 'limit',\n        page: 'page'\n      },\n      response: {\n        totalItems: 'results.opensearch:totalResults',\n        itemsLocation: 'results.artistmatches.artist'\n      }\n    };\n\n    this.$get = function ($q, $http, adStrapUtils) {\n      return {\n        loadPage: function (pageToLoad, pageSize, ajaxConfig) {\n          var start = (pageToLoad - 1) * pageSize,\n            i,\n            startPagingPage,\n            success,\n            defer = $q.defer();\n          ajaxConfig.params[defaults.request.start] = start;\n          ajaxConfig.params[defaults.request.pageSize] = pageSize;\n          ajaxConfig.params[defaults.request.page] = pageToLoad;\n\n          success = function (res) {\n            var response = {\n              items: adStrapUtils.evalObjectProperty(res, defaults.response.itemsLocation),\n              currentPage: pageToLoad,\n              totalPages: Math.ceil(\n                  adStrapUtils.evalObjectProperty(res, defaults.response.totalItems) /\n                  pageSize\n              ),\n              pagingArray: []\n            };\n            startPagingPage = (Math.ceil(pageToLoad / pageSize) * pageSize) - (pageSize - 1);\n            for (i = 0; i < 5; i++) {\n              if (startPagingPage + i > 0 && startPagingPage + i <= response.totalPages) {\n                response.pagingArray.push(startPagingPage + i);\n              }\n            }\n            defer.resolve(response);\n          };\n          if (ajaxConfig.method === 'JSONP') {\n            $http.jsonp(ajaxConfig.url + '?callback=JSON_CALLBACK', ajaxConfig).success(success);\n          } else {\n            $http(ajaxConfig).success(success);\n          }\n          return defer.promise;\n        }\n      };\n    };\n  });\n"],"sourceRoot":"/source/"}